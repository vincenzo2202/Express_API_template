1- se crea el archivo package.json y se introducen los valores de creación
    $ npm init

2- instalamos las dependencias necesarias para ejecutar el proyecto , en este caso estas seis. 
    $ npm i express typescript ts-node nodemon @types/express @types/node.

3- se crea el archivo .gitignore e introducimos aquellas carpetas o archivos que no queremos que se guarden al crear el repositorio
    $ .gitignore

4- creamos la carpeta src que va a alojar los archivos ts 
    /src 

5- Creamos archivo de entrada ts
    index.ts 

6- creamos el tsconfig.json que controla las restricciones del ts
    $ tsc --init

7- habilitamos en tsconfig.json el comando outdir y establecemos el nombre de la carpeta donde va a compilar ts, a elegir entre estos dos por convencion.
    "outDir": "./dir", 
    "outDir": "./build",   

8- ejecutamos tsc para que compile y así se cree automaticamente la carpeta dir.

9- hacemos el Import  para que traiga la carpeta express  que esta dentro de node_modules con:  
    import express from "express";

10- declaramos un constante por convecion llamada app y la igualamos a los metodos de express
    const app = express();

11- Creamos el listener para que arranque el servidor en el puerto 4000
    - app.listen(4000, ()=>{
        console.log("Server Running"); 
    }); 

12- Creamos los comandos script para ejecutar nodemon y compilar en el package.json

    -"build": "tsc",
    -"dev": "nodemon ./src/index.ts"
    "start": "node ./dir/index.js"

 para ejecutarlos en la terminal segun convenga.
    - npm run build
    - npm run dev 

13- creacion de los endpoints (protocolos http)

    app.get("/users", (req,res)=>{ 
        res.send("GET USER")   
    }); 

    app.put("/users", (req,res)=>{ 
        res.send("UPDATE USER")   
    });

    app.post("/users", (req,res)=>{ 
        res.send("CREATE USER")   
    });

    app.delete("/users", (req,res)=>{ 
        res.send("DELETE USER")   
    });

14- usaremos el thunder de VSC o el postman para ejecutar los endpoints.
    - damos click a new request para poder almacenar los endpoint una vez comprobados.

    - seleccionamos el tipo de endpoint (get, put, post, delete).

    - escribimos la url relativa (localhost:4000/users)

    - utilizando send comprobamos lo que nos devuelve  

    - si esta correcto creamos una colección y los alcenamos, para ello hacemos click en los tres puntos que nos salen en la actividad al poner el ratón sobre ellas y damos click en save to collection. 

    - Asignaremos un nombre a esta nueva coleccion y le damos submit 

15- creacion de los endpoints (protocolos http) dinámicos.

    - en la url añadimos /:id que hace referencia a la  id que le introduzcamos en el endpoint
    - almacenamos dicha id en const favoritesId = req.params.id
    - devolvemos el valor de la id y la concatenamos.

       
const getFavorites =  (req:Request, res:Response) => {
    const favoritesId = req.params.id
    const favoritesBodyId = req.body
    console.log(`GET FAVORITES with the name: ${favoritesId} and with this atributes: ${favoritesBodyId.id} and ${favoritesBodyId.id}`)
    res.send(`GET FAVORITES with the name: ${favoritesId} and with this atributes: ${favoritesBodyId.id} and ${favoritesBodyId.id}`)
} 
const createFavorites =  (req:Request, res:Response)=> {
    const favoritesId = req.params.id
    const favoritesBodyId = req.body
    console.log(`CREATE FAVORITES with the name: ${favoritesId} and with this atributes: ${favoritesBodyId.id} and ${favoritesBodyId.id}`)
    res.send(`CREATE FAVORITES with the name: ${favoritesId} and with this atributes: ${favoritesBodyId.id} and ${favoritesBodyId.id}`)
}
const updateFavorites =(req:Request, res:Response) => {
    const favoritesId = req.params.id
    const favoritesBodyId = req.body
    console.log(`UPDATE FAVORITES with the name: ${favoritesId} and with this atributes: ${favoritesBodyId.id} and ${favoritesBodyId.id}`)
    res.send(`UPDATE FAVORITES with the name: ${favoritesId} and with this atributes: ${favoritesBodyId.id} and ${favoritesBodyId.id}`)
}
const deleteFavorites =(req:Request, res:Response) => {
    const favoritesId = req.params.id
    const favoritesBodyId = req.body
    console.log(`DELETE FAVORITES with the name: ${favoritesId} and with this atributes: ${favoritesBodyId.id} and ${favoritesBodyId.id}`)
    res.send(`DELETE FAVORITES with the name: ${favoritesId} and with this atributes: ${favoritesBodyId.id} and ${favoritesBodyId.id}`)
} 

        

16- almacenamos el puerto en una constante de nombre PORT y la alojamos en el listen.
    const PORT = process.env.PORT || 4000 
    app.listen( PORT, () => {
    console.log(`Server Running ${PORT}`);
    });

17- Creamos la carpeta routes en /src donde se almacenarán las rutas.

18- Creamos los archivos correspondiente a las routes.

19- En el archivo usersroutes.ts importamos del fichero express a {Router} y lo almacenamos.

    import { Router } from "express";
    const usersRouter = Router();

20- importamos del archivo index.ts las peticiones y sustituimos app por la constante almacenada anteriormente.

    usersRouter.get("/users", (req, res) => {
    res.send("GET USER")
    });

21- realizamos un export de lo almacenado
    export {usersRouter}

22- si queremos introducir información de entrada (req) por el body debemos recordar que llegará almacenada en forma de string, para volver a objeto en formato .Json necesitamos un middleware. 
    app.use(express.json());

23- Creamos la carpeta donde se almacenará la lógica de los endpoints, llamada controllers, donde estarán alojados los archivos.
    userControllers.ts / favoritesControllers.ts
    
24- Realizamos el Import de los req y res almacenados en el fichero de express 

25- Almacenamos la lógica de cada endpoint en una constante, por convención la llamaremos (getUser, createUser, updateUser, deleteUser);

26- Esto lo exportamos.

27- ahora lo importaremos en el archivo routes y lo introducimos en el endpoint.

28- verificamos que funcione. 

29- Exportamos los endpoint del thunder/postman a la carpeta http que esta contenida en src

30- ejecutamos npm run build para compilarlo todo.

31- ejecutamos npm run start para ponerlo en marcha en ejecución. 


**- el servidor se detiene con CTRL + C

* para interactuar con el repositorio el servidor debe estar parado





